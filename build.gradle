buildscript {
    ext {
        compose_ui_version = '1.1.1'
    }
}// Top-level build file where you can add configuration options common to all sub-projects/modules.

plugins {
    id 'com.android.application' version '7.3.1' apply false
    id 'com.android.library' version '7.3.1' apply false
    id 'org.jetbrains.kotlin.android' version '1.6.10' apply false
    id 'org.jlleitschuh.gradle.ktlint' version '11.0.0'
    id 'io.gitlab.arturbosch.detekt' version '1.22.0'
    id 'com.google.dagger.hilt.android' version '2.44.2' apply false
}

subprojects {
    apply plugin: 'org.jlleitschuh.gradle.ktlint' // Version should be inherited from parent
    apply plugin: 'io.gitlab.arturbosch.detekt'

    repositories {
        // Required to download KtLint
        mavenCentral()
    }

    // Optionally configure plugin
    // https://github.com/JLLeitschuh/ktlint-gradle
    ktlint {
        debug = false
        verbose = true
        android = false
        outputToConsole = true
        ignoreFailures = false
        disabledRules = ["final-newline", "import-ordering"]
        outputColorName = "RED"

        reporters {
            reporter "plain"
            reporter "checkstyle"
            reporter "sarif"
        }

        filter {
            exclude("**/generated/**")
            include("**/kotlin/**")
        }
    }

    detekt {
        config = files("$rootDir/config/detekt.yml") // point to your custom config defining rules to run, overwriting default behavior

        reports {
            txt.enabled = true
            html.enabled = true
            xml.enabled = true
        }
    }
}

static def isLinuxOrMacOs() {
    def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)
    return osName.contains('linux') || osName.contains('mac os') || osName.contains('macos')
}

task copyGitHooks(type: Copy) {
    description 'Copies the git hooks from /git-hooks to the .git folder.'
    from("${rootDir}/git-hooks/") {
        include '**/*.sh'
        rename '(.*).sh', '$1'
    }
    into "${rootDir}/.git/hooks"
    onlyIf { isLinuxOrMacOs() }
}

task installGitHooks(type: Exec) {
    description 'Installs the pre-commit git hooks from  /git-hooks.'
    group 'git hooks'
    workingDir rootDir
    commandLine 'chmod'
    args '-R', '+x', '.git/hooks/'
    dependsOn copyGitHooks
    onlyIf { isLinuxOrMacOs() }
    doLast {
        logger.info('Git hook installed successfully.')
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

afterEvaluate {
    // We install the hook at the first occasion
    tasks['clean'].dependsOn installGitHooks
}